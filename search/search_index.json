{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction GymOS is an open source, gym managment solution aimed at helping individual trainers and small studios build their brand and connect with clients. It's designed to be a PWA (Progressive Web App), meaning that users have the option to \"install\" it on their devices and interact with it similar to how they interact with native applications. It's also designed to work with various outside systems to offload tasks such as email marketing, text and email reminders, payment processing and more. GymOS is free and open source, so you can download , build, and deploy the application yourself folowing the documentation, or you can contact me via mail or Discord and I can deploy it on your behalf for a small fee. Project Structure docs/ # The documentation files. GymOS.Client/ # The Client project that users actually interact with via the web. GymOS.DataModel/ # The DataModel and Database definitions. GymOS.Migrations/ # The Database Migrations for each release GymOS.Server/ # The Server project that is published to a host machine. GymOS.System/ # The Actor system that contains business logic for GymOS. GymOS.Services/ # This is where the services that interact with third party systems reside. LICENSE # The MIT License file. README.md # The project readme file. Features Member registration and authentication Roadmap Below you will find a list of our tentative release and target dates. We're ways looking for ways to improve, so if there's something you don't see but would like, contact me or submit an issue on github! [ ] Release 1 (1 Jan, 2022) [ ] Public facing informational website [x] Member registration [ ] Class Schedule [ ] Email Marketing Integration [ ] Member / Instructor Portal Release Notes Release 1: Coming Soon!","title":"Introduction"},{"location":"#introduction","text":"GymOS is an open source, gym managment solution aimed at helping individual trainers and small studios build their brand and connect with clients. It's designed to be a PWA (Progressive Web App), meaning that users have the option to \"install\" it on their devices and interact with it similar to how they interact with native applications. It's also designed to work with various outside systems to offload tasks such as email marketing, text and email reminders, payment processing and more. GymOS is free and open source, so you can download , build, and deploy the application yourself folowing the documentation, or you can contact me via mail or Discord and I can deploy it on your behalf for a small fee.","title":"Introduction"},{"location":"#project-structure","text":"docs/ # The documentation files. GymOS.Client/ # The Client project that users actually interact with via the web. GymOS.DataModel/ # The DataModel and Database definitions. GymOS.Migrations/ # The Database Migrations for each release GymOS.Server/ # The Server project that is published to a host machine. GymOS.System/ # The Actor system that contains business logic for GymOS. GymOS.Services/ # This is where the services that interact with third party systems reside. LICENSE # The MIT License file. README.md # The project readme file.","title":"Project Structure"},{"location":"#features","text":"Member registration and authentication","title":"Features"},{"location":"#roadmap","text":"Below you will find a list of our tentative release and target dates. We're ways looking for ways to improve, so if there's something you don't see but would like, contact me or submit an issue on github! [ ] Release 1 (1 Jan, 2022) [ ] Public facing informational website [x] Member registration [ ] Class Schedule [ ] Email Marketing Integration [ ] Member / Instructor Portal","title":"Roadmap"},{"location":"#release-notes","text":"","title":"Release Notes"},{"location":"#release-1","text":"Coming Soon!","title":"Release 1:"},{"location":"devreference/","text":"Developer Reference System Architecture GymOS is setup to be modular so it works with a variety of providers and services. The two needed components are a host machine to serve the app from, and a database to store the information. From within the host machine you have a number of different components: Client App : The client app is the actual interface / website that a user sees and interacts with. When someone talks about GymOS, this is likely what they're referring to. Server App : The server app is the server-side component of GymOS. It contains all of the business logic, endpoints, task scheduling, services etc. Controllers : The Controllers are the API endpoints that are called from the client. These endpoints can also be called from external applications as long as the requests are authenticated Task Scheduler : The task scheduler is a set of recurring events that are executed, such as automatic emails, data cleanup, class scheduling, etc. Business Logic : The business logic contains all of the actual logic that happens when someone registers, signs into a class, makes a purchase, and more. It is separated from the actual controllers and server logic in order to keep separation of concerns and make the system more flexible Services : Services are the pieces of the system that interact with the outside world. Rather than managing our own emails, payments, etc, we will just interface with a provider that specializes in those areas.","title":"Developer Reference"},{"location":"devreference/#developer-reference","text":"","title":"Developer Reference"},{"location":"devreference/#system-architecture","text":"GymOS is setup to be modular so it works with a variety of providers and services. The two needed components are a host machine to serve the app from, and a database to store the information. From within the host machine you have a number of different components: Client App : The client app is the actual interface / website that a user sees and interacts with. When someone talks about GymOS, this is likely what they're referring to. Server App : The server app is the server-side component of GymOS. It contains all of the business logic, endpoints, task scheduling, services etc. Controllers : The Controllers are the API endpoints that are called from the client. These endpoints can also be called from external applications as long as the requests are authenticated Task Scheduler : The task scheduler is a set of recurring events that are executed, such as automatic emails, data cleanup, class scheduling, etc. Business Logic : The business logic contains all of the actual logic that happens when someone registers, signs into a class, makes a purchase, and more. It is separated from the actual controllers and server logic in order to keep separation of concerns and make the system more flexible Services : Services are the pieces of the system that interact with the outside world. Rather than managing our own emails, payments, etc, we will just interface with a provider that specializes in those areas.","title":"System Architecture"},{"location":"gettingstarted/","text":"Getting Started Coming Soon! Installation Coming Soon! Environment 1 Coming Soon! Environment 2 Coming Soon! Configuration Coming Soon!","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"Coming Soon!","title":"Getting Started"},{"location":"gettingstarted/#installation","text":"Coming Soon!","title":"Installation"},{"location":"gettingstarted/#environment-1","text":"Coming Soon!","title":"Environment 1"},{"location":"gettingstarted/#environment-2","text":"Coming Soon!","title":"Environment 2"},{"location":"gettingstarted/#configuration","text":"Coming Soon!","title":"Configuration"},{"location":"support/","text":"Support Coming Soon! Issues Coming Soon! Contributing Coming Soon!","title":"Support"},{"location":"support/#support","text":"Coming Soon!","title":"Support"},{"location":"support/#issues","text":"Coming Soon!","title":"Issues"},{"location":"support/#contributing","text":"Coming Soon!","title":"Contributing"}]}